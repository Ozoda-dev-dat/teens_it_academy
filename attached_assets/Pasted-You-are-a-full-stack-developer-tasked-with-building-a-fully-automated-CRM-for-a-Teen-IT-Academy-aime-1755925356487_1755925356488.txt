You are a full stack developer tasked with building a fully automated CRM for a Teen IT Academy aimed at young children. The design should be fun, colorful, and kid-friendly (bright colors: blue, yellow, green; playful fonts; tech-related icons like robots/stars; animations for buttons/transitions; compatible with all devices).
Tech Stack: Node.js, POstgreSQL, React.js with Material-UI (or similar kid-friendly UI library), JWT for authentication. Can be deployed locally with npm install, npm start. Use Nodemailer for email for credentials (console log if email is not configured).
Panels:

Admin panel (/admin, login: admin@mail.com, password: admin2233): Role-based login for administrators only.
Student Dashboard (/student, can only log in with admin-created login and password).

Admin Features:

Admin Dashboard: Show total students, groups, upcoming classes, unpaid fees, medals statistics (use Chart.js for visual).
Students: Add new students (first name, last name, email, auto-generated password, profile picture). Account log.
Groups: Create/edit groups (name, description), assign students, set class schedules (calendar UI).
Attendance: Set attendance for students in a group only on specified days (or delete otherwise). Keep history.
Fees: Track student fees, count class days attended ($10 per class), show paid/unpaid status.
Medals: Give students gold/silver/bronze awards, number of stores.
Marketplace: Add/edit products (name, description, image, medal price). Set medal price.

Student Features:

Profile: Edit name, surname, profile picture. Show interesting profile card.
Medals: View gold/silver/bronze with animation (e.g. confetti).
Marketplace: Browse products, purchase with enough medals (deduct medals, save purchase). Show success animation.

Database (PostgreSQL):

Users: {role, email, password, first name, last name, profilePic, medals: {gold, silver, bronze}, purchases}

Groups: {name, description, students[], table[]}

Attendance: {groupId, date, participants[]}

Payments: {userId, amount, paymentDate, remainingDays}

Products: {name, description, image, medalCost}

Requirements:

Automation: All functions (attendance, payments, medals, marketplace) should work smoothly.

Design: Kid-friendly (space/tech theme, hover effects, React Toastify for toasts). I will post a logo image and use colors accordingly

APIs: RESTful endpoints (e.g. POST /api/students, GET /api/groups) with error handling.
Installation: Extract a ZIP/repo with the backend (server.js, models, routes), frontend (App.js, components) and README (POstgreSQL, npm) for installation.

Output: Build all the code from scratch (backend, frontend, configs). Make sure it is bug-free, fully functional and works with a single command. Provide the folder structure and installation instructions. Logically infer any missing details to complete the system.